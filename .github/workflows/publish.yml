name: Publish to npm (Manual)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (beta, alpha, latest)'
        required: false
        default: 'latest'
      dry-run:
        description: 'Perform a dry run'
        type: boolean
        required: false
        default: false

jobs:
  publish:
    name: Publish Package
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run tests
        run: pnpm test
      
      - name: Build package
        run: pnpm build:packages
      
      - name: Check package files
        run: |
          cd packages/next-dynamic-env
          npm pack --dry-run
          echo "Package contents verified"
      
      - name: Configure npm for publishing
        run: |
          echo "//registry.npmjs.org/:_authToken=\${NODE_AUTH_TOKEN}" > ~/.npmrc
      
      - name: Determine version and tag
        id: version
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
            # Remove 'v' prefix if present
            VERSION="${VERSION#v}"
            
            # Determine tag based on version
            if [[ "$VERSION" == *"beta"* ]]; then
              TAG="beta"
            elif [[ "$VERSION" == *"alpha"* ]]; then
              TAG="alpha"
            elif [[ "$VERSION" == *"rc"* ]]; then
              TAG="next"
            else
              TAG="latest"
            fi
          else
            # Workflow dispatch
            VERSION=$(node -p "require('./packages/next-dynamic-env/package.json').version")
            TAG="${{ github.event.inputs.tag || 'latest' }}"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Publishing version $VERSION with tag $TAG"
      
      - name: Update package version
        if: github.event_name == 'release'
        run: |
          cd packages/next-dynamic-env
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version
      
      - name: Dry Run - Publish to npm
        if: github.event.inputs.dry-run == 'true' || github.event_name == 'workflow_dispatch' && github.event.inputs.dry-run != 'false'
        run: |
          cd packages/next-dynamic-env
          npm publish --dry-run --tag ${{ steps.version.outputs.tag }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Publish to npm
        if: github.event.inputs.dry-run != 'true' && (github.event_name == 'release' || github.event_name == 'workflow_dispatch' && github.event.inputs.dry-run == 'false')
        run: |
          cd packages/next-dynamic-env
          npm publish --tag ${{ steps.version.outputs.tag }} --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Create GitHub Release Assets
        if: github.event_name == 'release'
        run: |
          cd packages/next-dynamic-env
          npm pack
          mv *.tgz next-dynamic-env-${{ steps.version.outputs.version }}.tgz
      
      - name: Upload Release Assets
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: packages/next-dynamic-env/next-dynamic-env-${{ steps.version.outputs.version }}.tgz
          asset_name: next-dynamic-env-${{ steps.version.outputs.version }}.tgz
          asset_content_type: application/gzip